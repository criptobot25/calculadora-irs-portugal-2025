// lib/aiAssistant.ts - IA Gratuita com Google Gemini
interface IRSData {
  employmentIncome?: number
  businessIncome?: number
  healthExpenses?: number
  educationExpenses?: number
  civilStatus?: string
  dependents?: number
}

export class IRSAIAssistant {
  private apiKey: string
  private conversationHistory: Array<{role: string, content: string}> = []

  constructor(apiKey: string) {
    this.apiKey = apiKey
    this.initializeConversation()
  }

  private initializeConversation() {
    this.conversationHistory = [{
      role: "user",
      content: `Voc√™ √© um assistente especializado em IRS portugu√™s. Sua fun√ß√£o √©:
      1. Fazer perguntas simples e naturais para obter dados fiscais
      2. Extrair n√∫meros de respostas em linguagem natural
      3. Sugerir dedu√ß√µes baseadas no perfil do usu√°rio
      4. Explicar conceitos fiscais de forma simples
      5. Sempre responder em portugu√™s de Portugal
      
      Dados que precisa obter:
      - Rendimentos (Categoria A, B, E, F)
      - Estado civil e dependentes
      - Despesas dedut√≠veis (sa√∫de, educa√ß√£o, habita√ß√£o)
      - Regime fiscal preferido
      
      Seja conversacional, amig√°vel e eficiente.`
    }]
  }

  async processUserMessage(message: string): Promise<{
    response: string
    extractedData?: Partial<IRSData>
    isComplete?: boolean
  }> {
    this.conversationHistory.push({
      role: "user",
      content: message
    })

    try {
      // Usar Google Gemini API (gratuita)
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: this.buildPrompt(message)
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 500
          }
        })
      })

      const data = await response.json()
      
      if (!data.candidates || !data.candidates[0]) {
        throw new Error('Resposta inv√°lida da API')
      }

      const assistantResponse = data.candidates[0].content.parts[0].text

      this.conversationHistory.push({
        role: "assistant", 
        content: assistantResponse
      })

      // Extrair dados estruturados da conversa
      const extractedData = this.extractStructuredData(assistantResponse)
      const isComplete = this.checkIfDataComplete(extractedData)

      return {
        response: assistantResponse,
        extractedData,
        isComplete
      }

    } catch (error) {
      console.error('AI Assistant Error:', error)
      // Fallback para resposta local se API falhar
      return this.getLocalFallbackResponse(message)
    }
  }

  private buildPrompt(userMessage: string): string {
    const context = this.conversationHistory.map(msg => 
      `${msg.role}: ${msg.content}`
    ).join('\n')
    
    return `${context}\nuser: ${userMessage}\n\nResponda como assistente de IRS portugu√™s, sendo natural e extraindo dados fiscais relevantes.`
  }

  private getLocalFallbackResponse(message: string): {
    response: string
    extractedData?: Partial<IRSData>
    isComplete?: boolean
  } {
    // Sistema local b√°sico de processamento
    const lowerMessage = message.toLowerCase()
    
    // Detectar rendimentos
    const salaryPattern = /(?:sal√°rio|ganho|ordenado).*?(\d+(?:[.,]\d+)?)/i
    const salaryMatch = message.match(salaryPattern)
    
    let response = ""
    const extractedData: Partial<IRSData> = {}
    
    if (salaryMatch) {
      const amount = parseFloat(salaryMatch[1].replace(',', '.'))
      extractedData.employmentIncome = amount
      response = `Entendi que tem um sal√°rio de ‚Ç¨${amount}. Tem outras fontes de rendimento como rendas, dividendos ou atividade empresarial?`
    } else if (lowerMessage.includes('sa√∫de') || lowerMessage.includes('m√©dic')) {
      const healthPattern = /(\d+(?:[.,]\d+)?)/
      const healthMatch = message.match(healthPattern)
      if (healthMatch) {
        extractedData.healthExpenses = parseFloat(healthMatch[1].replace(',', '.'))
        response = `Registei ‚Ç¨${extractedData.healthExpenses} em despesas de sa√∫de. Tem despesas de educa√ß√£o ou habita√ß√£o?`
      } else {
        response = "Que valor gastou aproximadamente em sa√∫de no √∫ltimo ano?"
      }
    } else if (lowerMessage.includes('solteiro') || lowerMessage.includes('casado')) {
      extractedData.civilStatus = lowerMessage.includes('casado') ? 'married' : 'single'
      response = "Tem filhos ou outros dependentes a cargo?"
    } else {
      response = "Ol√°! Vou ajud√°-lo com o c√°lculo do IRS. Para come√ßar, qual √© o seu sal√°rio anual bruto?"
    }

    return {
      response,
      extractedData,
      isComplete: false
    }
  }

  private extractStructuredData(text: string): Partial<IRSData> {
    // Patterns mais robustos para extrair n√∫meros e dados
    const patterns = {
      salary: /(?:sal√°rio|ganho|ordenado|vencimento|rendimento).*?(\d+(?:[.,]\d+)?)/i,
      business: /(?:neg√≥cio|empresa|atividade).*?(\d+(?:[.,]\d+)?)/i,
      health: /(?:sa√∫de|m√©dic|farm√°cia|hospital).*?(\d+(?:[.,]\d+)?)/i,
      education: /(?:educa√ß√£o|escola|universidade|forma√ß√£o).*?(\d+(?:[.,]\d+)?)/i,
      dependents: /(?:dependentes|filhos|crian√ßas).*?(\d+)/i,
      married: /(?:casado|casada|c√¥njuge|esposa|marido)/i,
      single: /(?:solteiro|solteira)/i
    }

    const extracted: Partial<IRSData> = {}

    // Extrair valores monet√°rios
    const salaryMatch = text.match(patterns.salary)
    if (salaryMatch) {
      extracted.employmentIncome = this.parseAmount(salaryMatch[1])
    }

    const businessMatch = text.match(patterns.business)
    if (businessMatch) {
      extracted.businessIncome = this.parseAmount(businessMatch[1])
    }

    const healthMatch = text.match(patterns.health)
    if (healthMatch) {
      extracted.healthExpenses = this.parseAmount(healthMatch[1])
    }

    const educationMatch = text.match(patterns.education)
    if (educationMatch) {
      extracted.educationExpenses = this.parseAmount(educationMatch[1])
    }

    // Extrair dependentes
    const dependentsMatch = text.match(patterns.dependents)
    if (dependentsMatch) {
      extracted.dependents = parseInt(dependentsMatch[1])
    }

    // Estado civil
    if (patterns.married.test(text)) {
      extracted.civilStatus = 'married'
    } else if (patterns.single.test(text)) {
      extracted.civilStatus = 'single'
    }

    return extracted
  }

  private parseAmount(amountStr: string): number {
    // Remove espa√ßos, substitui v√≠rgula por ponto
    return parseFloat(amountStr.replace(/\s/g, '').replace(',', '.'))
  }

  private checkIfDataComplete(data: Partial<IRSData>): boolean {
    // Verifica se tem dados m√≠nimos para calcular
    return !!(data.employmentIncome || data.businessIncome)
  }

  generateSmartSuggestions(currentData: Partial<IRSData>): string[] {
    const suggestions = []

    if (currentData.employmentIncome) {
      const income = currentData.employmentIncome
      
      // Sugest√µes baseadas no sal√°rio
      if (income > 50000) {
        suggestions.push("üí° Com o seu rendimento, considere o regime organizado")
        suggestions.push("üí° Despesas de sa√∫de podem ser significativas - guarde todos os recibos")
      }
      
      if (currentData.dependents && currentData.dependents > 0) {
        suggestions.push("üí° N√£o se esque√ßa das despesas de educa√ß√£o dos seus filhos")
        suggestions.push("üí° Consultas m√©dicas dos dependentes tamb√©m s√£o dedut√≠veis")
      }
    }

    return suggestions
  }
}

// Fun√ß√£o para processar linguagem natural
export function parseNaturalLanguageAmount(text: string): number | null {
  // Remove espa√ßos e converte para min√∫sculas
  const cleanText = text.toLowerCase().replace(/\s/g, '')
  
  // Padr√µes para diferentes formatos
  const patterns = [
    // "30 mil euros", "30mil", "30k"
    /(\d+)(?:[\.,](\d+))?(?:mil|k)/,
    // "2500 euros", "2.500‚Ç¨", "2,500"
    /(\d+)(?:[\.,](\d{3}))?(?:euros?|‚Ç¨)?/,
    // "dois mil e quinhentos"
    /dois\s*mil.*?(\d+)/
  ]

  for (const pattern of patterns) {
    const match = cleanText.match(pattern)
    if (match) {
      const thousands = parseInt(match[1])
      const units = match[2] ? parseInt(match[2]) : 0
      
      if (cleanText.includes('mil') || cleanText.includes('k')) {
        return thousands * 1000 + units
      } else {
        return thousands + (units / 1000)
      }
    }
  }

  return null
}